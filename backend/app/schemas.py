# backend/app/schemas.py
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


# ============================
# Assessment Schemas
# ============================

class AssessmentQuestion(BaseModel):
    """Represents a single question in the assessment."""
    question_id: int = Field(..., description="Unique identifier for the question.")
    text: str = Field(..., description="The text content of the question.")


class AssessmentAnswer(BaseModel):
    """Represents an answer provided by the user for a specific question."""
    question_id: int = Field(
        ..., description="Identifier linking the answer to the question."
    )
    answer_text: str = Field(..., description="The user's textual answer.")


class AnalysisRequest(BaseModel):
    """Request model to trigger the assessment analysis."""
    person_id: str = Field(
        ...,
        min_length=1,
        description="Identifier for the person being assessed."
    )
    answers: List[AssessmentAnswer] = Field(
        ..., description="List of answers provided by the person."
    )


class DomainAnalysis(BaseModel):
    """Structured analysis results for specific assessment domains."""
    cognitive: str = Field(
        ..., description="Summary of cognitive abilities analysis."
    )
    physical: str = Field(
        ..., description="Summary of physical abilities analysis."
    )
    health: str = Field(
        ..., description="Summary of overall health status analysis."
    )
    personal_info: str = Field(
        ..., description="Extracted key personal details (e.g., living situation)."
    )


class NotificationNote(BaseModel):
    """Represents a single, parsed actionable note extracted from the analysis."""
    note: str = Field(..., description="The text content of the actionable note.")


class FullAnalysisResponse(BaseModel):
    """
    The complete response containing the assessment analysis results and
    associated notifications.
    """
    analysis: DomainAnalysis = Field(..., description="Structured domain analysis.")
    notifications: List[NotificationNote] = Field(
        ..., description="List of parsed actionable notification notes."
    )
    error: Optional[str] = Field(
        None, description="Optional error message if analysis failed partially or fully."
    )
    raw_notification_output: Optional[str] = Field(
        None,
        description=(
            "The raw, potentially multi-line, formatted string for "
            "notifications as generated by the LLM before parsing."
        )
    )


# ============================
# Q&A Schemas
# ============================

class AskAboutPersonRequest(BaseModel):
    """
    Request model for asking follow-up questions about a person, potentially
    using both document context and assessment history.
    """
    person_id: str = Field(
        ...,
        min_length=1,
        description="Identifier for the person being asked about."
    )
    question: str = Field(..., description="The question being asked.")


class UnifiedAskResponse(BaseModel):
    """Response model for the unified Q&A endpoint, providing answers derived
       from different sources."""
    document_answer: Optional[str] = Field(
        "[Not Available]",
        description="Answer derived from retrieved document context."
    )
    analysis_answer: Optional[str] = Field(
        "[Not Available]",
        description="Answer derived from assessment history analysis."
    )
    error: Optional[str] = Field(
        None, description="General error message during the Q&A process."
    )
    document_error: Optional[str] = Field(
        None, description="Specific error related to document retrieval or processing."
    )
    analysis_error: Optional[str] = Field(
        None, description="Specific error related to analysis retrieval or processing."
    )


# ============================
# PDF Management Schemas
# ============================

class PDFUploadResponse(BaseModel):
    """Response model after successfully uploading a PDF."""
    filename: str = Field(..., description="The name of the uploaded file as saved.")
    detail: str = Field(..., description="Status message regarding the upload.")


class PDFListResponse(BaseModel):
    """Response model for listing available PDF files."""
    pdf_files: List[str] = Field(..., description="List of PDF filenames.")