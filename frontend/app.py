# app.py (Main Gradio Application Entry Point)

import logging
import os
import socket
import traceback

import gradio as gr

from event_handlers import ICON_ERROR, ICON_INFO
from ui_components import build_ui

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# --- Build the Gradio UI ---
log.info("Building Gradio UI...")
try:
    demo = build_ui()
    log.info("Gradio UI built successfully.")
except Exception as e:
    log.error(f"Fatal error during UI build: {e}", exc_info=True)
    exit(1)


# --- Launch Configuration ---
def get_launch_config():
    """Retrieves launch configuration from environment variables or defaults."""
    config = {
        "cert_path": "cert.pem",
        "key_path": "key.pem",
        "server_name": os.getenv("GRADIO_SERVER_NAME", "0.0.0.0"),
        "server_port": int(os.getenv("GRADIO_SERVER_PORT", "7860")),
        "share": os.getenv("GRADIO_SHARE", "False").lower() == "true",
        "debug": os.getenv("GRADIO_DEBUG", "True").lower() == "true",
    }
    config["use_https"] = (
        os.path.exists(config["cert_path"]) and
        os.path.exists(config["key_path"])
    )
    return config


def print_access_urls(protocol: str, host: str, port: int):
    """Prints common URLs to access the Gradio app."""
    base_url = f"{protocol}://{host}:{port}"
    print(f"\n{ICON_INFO} Gradio app access URLs:")
    if host == "0.0.0.0":
        print(f"  - Local: {protocol}://localhost:{port} or {protocol}://127.0.0.1:{port}")
        try:
            # Attempt to find local network IP
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            if local_ip and not local_ip.startswith("127."):
                 print(f"  - Network: {protocol}://{local_ip}:{port}")
        except socket.gaierror:
            print(f"  - Network: Could not determine local network IP.")
    else:
         print(f"  - Configured Host: {base_url}")


# --- Launching the App ---
if __name__ == "__main__":
    launch_config = get_launch_config()
    server_name = launch_config["server_name"]
    server_port = launch_config["server_port"]
    share_enabled = launch_config["share"]
    use_https = launch_config["use_https"]

    # Base arguments for demo.launch()
    launch_kwargs = {
        "server_name": server_name,
        "server_port": server_port,
        "share": share_enabled,
        "debug": launch_config["debug"],
        # Prevent browser from opening automatically if needed
        # "prevent_thread_lock": True, # Use if experiencing launch issues
        # "inbrowser": False,
    }

    launch_successful = False
    protocol = "http" # Default protocol

    if use_https:
        protocol = "https"
        print(f"{ICON_INFO} Found certificates. Attempting HTTPS launch on {server_name}:{server_port}...")
        https_kwargs = launch_kwargs.copy()
        https_kwargs.update({
            "ssl_certfile": launch_config["cert_path"],
            "ssl_keyfile": launch_config["key_path"],
            "ssl_verify": False  
        })
        try:
            demo.launch(**https_kwargs)
            launch_successful = True # If launch returns without error, assume success
        except Exception as e:
            print(f"{ICON_ERROR} ERROR launching with HTTPS: {e}")
            print(f"{ICON_INFO} Check certificate paths and permissions.")
            traceback.print_exc()
            print(f"{ICON_INFO} Falling back to HTTP...")
            use_https = False 
            protocol = "http"

    if not launch_successful:
        print(f"{ICON_INFO} Attempting HTTP launch on {server_name}:{server_port}...")
        try:
            demo.launch(**launch_kwargs)
            launch_successful = True
        except Exception as e:
            print(f"{ICON_ERROR} ERROR launching with HTTP: {e}")
            traceback.print_exc()

    if launch_successful:
        print_access_urls(protocol, server_name, server_port)
        if use_https:
            print(f"{ICON_INFO} NOTE: If using self-signed certificates, your browser may show security warnings.")
        if share_enabled:
            print(f"{ICON_INFO} NOTE: A public Gradio Share link should be generated by Gradio above.")
    else:
        print(f"\n{ICON_ERROR} Gradio application failed to launch.")